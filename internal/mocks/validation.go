// Code generated by MockGen. DO NOT EDIT.
// Source: validation.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockValidationResult is a mock of ValidationResult interface
type MockValidationResult struct {
	ctrl     *gomock.Controller
	recorder *MockValidationResultMockRecorder
}

// MockValidationResultMockRecorder is the mock recorder for MockValidationResult
type MockValidationResultMockRecorder struct {
	mock *MockValidationResult
}

// NewMockValidationResult creates a new mock instance
func NewMockValidationResult(ctrl *gomock.Controller) *MockValidationResult {
	mock := &MockValidationResult{ctrl: ctrl}
	mock.recorder = &MockValidationResultMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockValidationResult) EXPECT() *MockValidationResultMockRecorder {
	return m.recorder
}

// Errors mocks base method
func (m *MockValidationResult) Errors() map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Errors")
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// Errors indicates an expected call of Errors
func (mr *MockValidationResultMockRecorder) Errors() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Errors", reflect.TypeOf((*MockValidationResult)(nil).Errors))
}

// IsValid mocks base method
func (m *MockValidationResult) IsValid() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsValid")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsValid indicates an expected call of IsValid
func (mr *MockValidationResultMockRecorder) IsValid() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsValid", reflect.TypeOf((*MockValidationResult)(nil).IsValid))
}
